// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ujds/v1/record.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ashep/ujds/sdk/proto/ujds/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RecordServiceName is the fully-qualified name of the RecordService service.
	RecordServiceName = "ujds.v1.RecordService"
)

// RecordServiceClient is a client for the ujds.v1.RecordService service.
type RecordServiceClient interface {
	PushRecords(context.Context, *connect_go.Request[v1.PushRecordsRequest]) (*connect_go.Response[v1.PushRecordsResponse], error)
	GetRecord(context.Context, *connect_go.Request[v1.GetRecordRequest]) (*connect_go.Response[v1.GetRecordResponse], error)
	GetRecords(context.Context, *connect_go.Request[v1.GetRecordsRequest]) (*connect_go.Response[v1.GetRecordsResponse], error)
	ClearRecords(context.Context, *connect_go.Request[v1.ClearRecordsRequest]) (*connect_go.Response[v1.ClearRecordsResponse], error)
}

// NewRecordServiceClient constructs a client for the ujds.v1.RecordService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecordServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RecordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recordServiceClient{
		pushRecords: connect_go.NewClient[v1.PushRecordsRequest, v1.PushRecordsResponse](
			httpClient,
			baseURL+"/ujds.v1.RecordService/PushRecords",
			opts...,
		),
		getRecord: connect_go.NewClient[v1.GetRecordRequest, v1.GetRecordResponse](
			httpClient,
			baseURL+"/ujds.v1.RecordService/GetRecord",
			opts...,
		),
		getRecords: connect_go.NewClient[v1.GetRecordsRequest, v1.GetRecordsResponse](
			httpClient,
			baseURL+"/ujds.v1.RecordService/GetRecords",
			opts...,
		),
		clearRecords: connect_go.NewClient[v1.ClearRecordsRequest, v1.ClearRecordsResponse](
			httpClient,
			baseURL+"/ujds.v1.RecordService/ClearRecords",
			opts...,
		),
	}
}

// recordServiceClient implements RecordServiceClient.
type recordServiceClient struct {
	pushRecords  *connect_go.Client[v1.PushRecordsRequest, v1.PushRecordsResponse]
	getRecord    *connect_go.Client[v1.GetRecordRequest, v1.GetRecordResponse]
	getRecords   *connect_go.Client[v1.GetRecordsRequest, v1.GetRecordsResponse]
	clearRecords *connect_go.Client[v1.ClearRecordsRequest, v1.ClearRecordsResponse]
}

// PushRecords calls ujds.v1.RecordService.PushRecords.
func (c *recordServiceClient) PushRecords(ctx context.Context, req *connect_go.Request[v1.PushRecordsRequest]) (*connect_go.Response[v1.PushRecordsResponse], error) {
	return c.pushRecords.CallUnary(ctx, req)
}

// GetRecord calls ujds.v1.RecordService.GetRecord.
func (c *recordServiceClient) GetRecord(ctx context.Context, req *connect_go.Request[v1.GetRecordRequest]) (*connect_go.Response[v1.GetRecordResponse], error) {
	return c.getRecord.CallUnary(ctx, req)
}

// GetRecords calls ujds.v1.RecordService.GetRecords.
func (c *recordServiceClient) GetRecords(ctx context.Context, req *connect_go.Request[v1.GetRecordsRequest]) (*connect_go.Response[v1.GetRecordsResponse], error) {
	return c.getRecords.CallUnary(ctx, req)
}

// ClearRecords calls ujds.v1.RecordService.ClearRecords.
func (c *recordServiceClient) ClearRecords(ctx context.Context, req *connect_go.Request[v1.ClearRecordsRequest]) (*connect_go.Response[v1.ClearRecordsResponse], error) {
	return c.clearRecords.CallUnary(ctx, req)
}

// RecordServiceHandler is an implementation of the ujds.v1.RecordService service.
type RecordServiceHandler interface {
	PushRecords(context.Context, *connect_go.Request[v1.PushRecordsRequest]) (*connect_go.Response[v1.PushRecordsResponse], error)
	GetRecord(context.Context, *connect_go.Request[v1.GetRecordRequest]) (*connect_go.Response[v1.GetRecordResponse], error)
	GetRecords(context.Context, *connect_go.Request[v1.GetRecordsRequest]) (*connect_go.Response[v1.GetRecordsResponse], error)
	ClearRecords(context.Context, *connect_go.Request[v1.ClearRecordsRequest]) (*connect_go.Response[v1.ClearRecordsResponse], error)
}

// NewRecordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecordServiceHandler(svc RecordServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ujds.v1.RecordService/PushRecords", connect_go.NewUnaryHandler(
		"/ujds.v1.RecordService/PushRecords",
		svc.PushRecords,
		opts...,
	))
	mux.Handle("/ujds.v1.RecordService/GetRecord", connect_go.NewUnaryHandler(
		"/ujds.v1.RecordService/GetRecord",
		svc.GetRecord,
		opts...,
	))
	mux.Handle("/ujds.v1.RecordService/GetRecords", connect_go.NewUnaryHandler(
		"/ujds.v1.RecordService/GetRecords",
		svc.GetRecords,
		opts...,
	))
	mux.Handle("/ujds.v1.RecordService/ClearRecords", connect_go.NewUnaryHandler(
		"/ujds.v1.RecordService/ClearRecords",
		svc.ClearRecords,
		opts...,
	))
	return "/ujds.v1.RecordService/", mux
}

// UnimplementedRecordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecordServiceHandler struct{}

func (UnimplementedRecordServiceHandler) PushRecords(context.Context, *connect_go.Request[v1.PushRecordsRequest]) (*connect_go.Response[v1.PushRecordsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.RecordService.PushRecords is not implemented"))
}

func (UnimplementedRecordServiceHandler) GetRecord(context.Context, *connect_go.Request[v1.GetRecordRequest]) (*connect_go.Response[v1.GetRecordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.RecordService.GetRecord is not implemented"))
}

func (UnimplementedRecordServiceHandler) GetRecords(context.Context, *connect_go.Request[v1.GetRecordsRequest]) (*connect_go.Response[v1.GetRecordsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.RecordService.GetRecords is not implemented"))
}

func (UnimplementedRecordServiceHandler) ClearRecords(context.Context, *connect_go.Request[v1.ClearRecordsRequest]) (*connect_go.Response[v1.ClearRecordsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.RecordService.ClearRecords is not implemented"))
}
