// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/ujds/v1/data.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ashep/ujds/sdk/proto/ujds/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DataServiceName is the fully-qualified name of the DataService service.
	DataServiceName = "ujds.v1.DataService"
)

// DataServiceClient is a client for the ujds.v1.DataService service.
type DataServiceClient interface {
	CreateSchema(context.Context, *connect_go.Request[v1.CreateSchemaRequest]) (*connect_go.Response[v1.CreateSchemaResponse], error)
	GetSchema(context.Context, *connect_go.Request[v1.GetSchemaRequest]) (*connect_go.Response[v1.GetSchemaResponse], error)
	UpdateSchema(context.Context, *connect_go.Request[v1.UpdateSchemaRequest]) (*connect_go.Response[v1.UpdateSchemaResponse], error)
	SetItems(context.Context, *connect_go.Request[v1.SetItemsRequest]) (*connect_go.Response[v1.SetItemsResponse], error)
	GetItems(context.Context, *connect_go.Request[v1.GetItemsRequest]) (*connect_go.Response[v1.GetItemsResponse], error)
}

// NewDataServiceClient constructs a client for the ujds.v1.DataService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dataServiceClient{
		createSchema: connect_go.NewClient[v1.CreateSchemaRequest, v1.CreateSchemaResponse](
			httpClient,
			baseURL+"/ujds.v1.DataService/CreateSchema",
			opts...,
		),
		getSchema: connect_go.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+"/ujds.v1.DataService/GetSchema",
			opts...,
		),
		updateSchema: connect_go.NewClient[v1.UpdateSchemaRequest, v1.UpdateSchemaResponse](
			httpClient,
			baseURL+"/ujds.v1.DataService/UpdateSchema",
			opts...,
		),
		setItems: connect_go.NewClient[v1.SetItemsRequest, v1.SetItemsResponse](
			httpClient,
			baseURL+"/ujds.v1.DataService/SetItems",
			opts...,
		),
		getItems: connect_go.NewClient[v1.GetItemsRequest, v1.GetItemsResponse](
			httpClient,
			baseURL+"/ujds.v1.DataService/GetItems",
			opts...,
		),
	}
}

// dataServiceClient implements DataServiceClient.
type dataServiceClient struct {
	createSchema *connect_go.Client[v1.CreateSchemaRequest, v1.CreateSchemaResponse]
	getSchema    *connect_go.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	updateSchema *connect_go.Client[v1.UpdateSchemaRequest, v1.UpdateSchemaResponse]
	setItems     *connect_go.Client[v1.SetItemsRequest, v1.SetItemsResponse]
	getItems     *connect_go.Client[v1.GetItemsRequest, v1.GetItemsResponse]
}

// CreateSchema calls ujds.v1.DataService.CreateSchema.
func (c *dataServiceClient) CreateSchema(ctx context.Context, req *connect_go.Request[v1.CreateSchemaRequest]) (*connect_go.Response[v1.CreateSchemaResponse], error) {
	return c.createSchema.CallUnary(ctx, req)
}

// GetSchema calls ujds.v1.DataService.GetSchema.
func (c *dataServiceClient) GetSchema(ctx context.Context, req *connect_go.Request[v1.GetSchemaRequest]) (*connect_go.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// UpdateSchema calls ujds.v1.DataService.UpdateSchema.
func (c *dataServiceClient) UpdateSchema(ctx context.Context, req *connect_go.Request[v1.UpdateSchemaRequest]) (*connect_go.Response[v1.UpdateSchemaResponse], error) {
	return c.updateSchema.CallUnary(ctx, req)
}

// SetItems calls ujds.v1.DataService.SetItems.
func (c *dataServiceClient) SetItems(ctx context.Context, req *connect_go.Request[v1.SetItemsRequest]) (*connect_go.Response[v1.SetItemsResponse], error) {
	return c.setItems.CallUnary(ctx, req)
}

// GetItems calls ujds.v1.DataService.GetItems.
func (c *dataServiceClient) GetItems(ctx context.Context, req *connect_go.Request[v1.GetItemsRequest]) (*connect_go.Response[v1.GetItemsResponse], error) {
	return c.getItems.CallUnary(ctx, req)
}

// DataServiceHandler is an implementation of the ujds.v1.DataService service.
type DataServiceHandler interface {
	CreateSchema(context.Context, *connect_go.Request[v1.CreateSchemaRequest]) (*connect_go.Response[v1.CreateSchemaResponse], error)
	GetSchema(context.Context, *connect_go.Request[v1.GetSchemaRequest]) (*connect_go.Response[v1.GetSchemaResponse], error)
	UpdateSchema(context.Context, *connect_go.Request[v1.UpdateSchemaRequest]) (*connect_go.Response[v1.UpdateSchemaResponse], error)
	SetItems(context.Context, *connect_go.Request[v1.SetItemsRequest]) (*connect_go.Response[v1.SetItemsResponse], error)
	GetItems(context.Context, *connect_go.Request[v1.GetItemsRequest]) (*connect_go.Response[v1.GetItemsResponse], error)
}

// NewDataServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataServiceHandler(svc DataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ujds.v1.DataService/CreateSchema", connect_go.NewUnaryHandler(
		"/ujds.v1.DataService/CreateSchema",
		svc.CreateSchema,
		opts...,
	))
	mux.Handle("/ujds.v1.DataService/GetSchema", connect_go.NewUnaryHandler(
		"/ujds.v1.DataService/GetSchema",
		svc.GetSchema,
		opts...,
	))
	mux.Handle("/ujds.v1.DataService/UpdateSchema", connect_go.NewUnaryHandler(
		"/ujds.v1.DataService/UpdateSchema",
		svc.UpdateSchema,
		opts...,
	))
	mux.Handle("/ujds.v1.DataService/SetItems", connect_go.NewUnaryHandler(
		"/ujds.v1.DataService/SetItems",
		svc.SetItems,
		opts...,
	))
	mux.Handle("/ujds.v1.DataService/GetItems", connect_go.NewUnaryHandler(
		"/ujds.v1.DataService/GetItems",
		svc.GetItems,
		opts...,
	))
	return "/ujds.v1.DataService/", mux
}

// UnimplementedDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataServiceHandler struct{}

func (UnimplementedDataServiceHandler) CreateSchema(context.Context, *connect_go.Request[v1.CreateSchemaRequest]) (*connect_go.Response[v1.CreateSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.DataService.CreateSchema is not implemented"))
}

func (UnimplementedDataServiceHandler) GetSchema(context.Context, *connect_go.Request[v1.GetSchemaRequest]) (*connect_go.Response[v1.GetSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.DataService.GetSchema is not implemented"))
}

func (UnimplementedDataServiceHandler) UpdateSchema(context.Context, *connect_go.Request[v1.UpdateSchemaRequest]) (*connect_go.Response[v1.UpdateSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.DataService.UpdateSchema is not implemented"))
}

func (UnimplementedDataServiceHandler) SetItems(context.Context, *connect_go.Request[v1.SetItemsRequest]) (*connect_go.Response[v1.SetItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.DataService.SetItems is not implemented"))
}

func (UnimplementedDataServiceHandler) GetItems(context.Context, *connect_go.Request[v1.GetItemsRequest]) (*connect_go.Response[v1.GetItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ujds.v1.DataService.GetItems is not implemented"))
}
