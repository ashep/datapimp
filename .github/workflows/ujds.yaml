name: tests
on: push
jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup tools
        run: |
          go install github.com/go-task/task/v3/cmd/task@latest

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Setup dependencies
        run: go mod vendor

  lint:
    name: Run linters
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - prepare
    steps:
      - name: Setup
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: golangci-lint
        run: task lint.golangci

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - name: Unit tests
        run: task run test.unit
      - name: Functional tests
        run: task run test.func

  build-image:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - test
    steps:
      - name: Docker login
        run: docker login -u ${{ vars.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASSWD }}

      - name: Build
        run: docker build --build-arg ARCH=x86_64 --build-arg APP_NAME=${{ github.event.repository.name }} --build-arg APP_VERSION=${{ github.ref_name }} -t ${{ github.event.repository.name }} .

      - name: Push dev
        if: github.ref_name != 'main'
        run: |
          docker tag ${{ github.event.repository.name }} ${{ vars.REGISTRY_USER }}/${{ github.event.repository.name }}:dev
          docker push ${{ vars.REGISTRY_USER }}/${{ github.event.repository.name }}:dev

      - name: Push main
        if: github.ref_name == 'main'
        run: |
          docker tag ${{ github.event.repository.name }} ${{ vars.REGISTRY_USER }}/${{ github.event.repository.name }}:latest
          docker push ${{ vars.REGISTRY_USER }}/${{ github.event.repository.name }}:latest
