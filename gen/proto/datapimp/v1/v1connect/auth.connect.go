// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/datapimp/v1/auth.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/ashep/datapimp/gen/proto/datapimp/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "datapimp.v1.AuthService"
)

// AuthServiceClient is a client for the datapimp.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	CreateEntity(context.Context, *connect_go.Request[v1.CreateEntityRequest]) (*connect_go.Response[v1.CreateEntityResponse], error)
}

// NewAuthServiceClient constructs a client for the datapimp.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+"/datapimp.v1.AuthService/Login",
			opts...,
		),
		logout: connect_go.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+"/datapimp.v1.AuthService/Logout",
			opts...,
		),
		createEntity: connect_go.NewClient[v1.CreateEntityRequest, v1.CreateEntityResponse](
			httpClient,
			baseURL+"/datapimp.v1.AuthService/CreateEntity",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login        *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	logout       *connect_go.Client[v1.LogoutRequest, v1.LogoutResponse]
	createEntity *connect_go.Client[v1.CreateEntityRequest, v1.CreateEntityResponse]
}

// Login calls datapimp.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls datapimp.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// CreateEntity calls datapimp.v1.AuthService.CreateEntity.
func (c *authServiceClient) CreateEntity(ctx context.Context, req *connect_go.Request[v1.CreateEntityRequest]) (*connect_go.Response[v1.CreateEntityResponse], error) {
	return c.createEntity.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the datapimp.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	CreateEntity(context.Context, *connect_go.Request[v1.CreateEntityRequest]) (*connect_go.Response[v1.CreateEntityResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/datapimp.v1.AuthService/Login", connect_go.NewUnaryHandler(
		"/datapimp.v1.AuthService/Login",
		svc.Login,
		opts...,
	))
	mux.Handle("/datapimp.v1.AuthService/Logout", connect_go.NewUnaryHandler(
		"/datapimp.v1.AuthService/Logout",
		svc.Logout,
		opts...,
	))
	mux.Handle("/datapimp.v1.AuthService/CreateEntity", connect_go.NewUnaryHandler(
		"/datapimp.v1.AuthService/CreateEntity",
		svc.CreateEntity,
		opts...,
	))
	return "/datapimp.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datapimp.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datapimp.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateEntity(context.Context, *connect_go.Request[v1.CreateEntityRequest]) (*connect_go.Response[v1.CreateEntityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datapimp.v1.AuthService.CreateEntity is not implemented"))
}
